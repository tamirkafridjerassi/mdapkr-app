name: Build, Test, and Dispatch Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::055029294053:role/GitHubActionsECRPush
          aws-region: ap-south-1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: 055029294053.dkr.ecr.ap-south-1.amazonaws.com
          ECR_REPOSITORY: mdapkr-fastapi
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./fastapi-app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  unit-test:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install pytest
      - run: pytest tests/unit

  e2e-test:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install pytest requests
      - run: docker compose -f docker-compose.test.yml up -d
      - name: Wait for API to be healthy
        run: |
          for i in {1..10}; do
            curl -s http://localhost:8000/people && exit 0 || sleep 3
          done
          echo "API did not start in time" && exit 1
      - run: pytest tests/e2e
      - run: docker compose -f docker-compose.test.yml down

  deploy:
    runs-on: ubuntu-latest
    needs: [unit-test, e2e-test]

    steps:
      - name: Trigger CD workflow in mdapkr-k8s repo
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: tamirkafridjerassi/mdapkr-k8s
          event-type: deploy-mdapkr
          client-payload: '{"image_tag": "${{ github.sha }}"}'
